None //
// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Warning: This code was generated by a tool.
//
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Management.Automation;
using Microsoft.Azure.Commands.Compute.Automation.Models;
using Microsoft.Azure.Commands.ResourceManager.Common.ArgumentCompleters;
using Microsoft.Azure.Management.Compute.Models;
using Microsoft.WindowsAzure.Commands.Utilities.Common;

namespace Microsoft.Azure.Commands.Compute.Automation
{
    [Cmdlet(VerbsCommon.Set, ResourceManager.Common.AzureRMConstants.AzureRMPrefix + "VMDataDisk", SupportsShouldProcess = true)]
    [OutputType(typeof(PSVirtualMachine))]
    public partial class SetAzureRmVMDataDiskCommand : Microsoft.Azure.Commands.ResourceManager.Common.AzureRMCmdlet
    {
        [Parameter(
            Mandatory = true,
            Position = 0,
            ValueFromPipeline = true,
            ValueFromPipelineByPropertyName = true,
            HelpMessage = "The virtual machine object.")]
        [ValidateNotNullOrEmpty]
        public PSVirtualMachine VM { get; set; }

        [Parameter(
            Mandatory = true,
            Position = 1,
            ValueFromPipelineByPropertyName = true,
            HelpMessage = "The Name of the data disk that is attached to the virtual machine.")]
        [ValidateNotNullOrEmpty]
        public string Name { get; set; }

        [Parameter(
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage = "The new size of the data disk in GB.")]
        [AllowNull]
        public int DiskSizeInGB { get; set; }

        [Parameter(
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage = "The new LUN for the data disk.")]
        [AllowNull]
        public int Lun { get; set; }

        [Parameter(
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage = "The new disk caching type.")]
        [ValidateSet(
            "None",
            "ReadOnly",
            "ReadWrite",
            IgnoreCase = true)]
        public string Caching { get; set; }

        [Parameter(
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage = "The new availability policy for the data disk.")]
        [ValidateSet(
            "AutomaticReattach",
            "None",
            IgnoreCase = true)]
        public string AvailabilityPolicy { get; set; }

        protected override void ProcessRecord()
        {
            if (ShouldProcess("VMDataDisk", "Set"))
            {
                Run();
            }
        }

        private void Run()
        {
            var vDataDisk = VM.StorageProfile.DataDisks.FirstOrDefault(e => string.Equals(e.Name, this.Name, StringComparison.CurrentCultureIgnoreCase));

            if (vDataDisk != null)
            {
                if (this.IsParameterBound(c => c.DiskSizeInGB))
                {
                    vDataDisk.DiskSizeGB = this.DiskSizeInGB;
                }

                if (this.IsParameterBound(c => c.Lun))
                {
                    vDataDisk.Lun = this.Lun;
                }

                if (this.IsParameterBound(c => c.Caching))
                {
                    vDataDisk.Caching = this.Caching;
                }

                if (this.IsParameterBound(c => c.AvailabilityPolicy))
                {
                    if (this.AvailabilityPolicy == "AutomaticReattach")
                    {
                        vDataDisk.AvailabilityPolicy = new AvailabilityPolicy { AutomaticReattach = true };
                    }
                    else if (this.AvailabilityPolicy == "None")
                    {
                        vDataDisk.AvailabilityPolicy = null;
                    }
                }
            }

            WriteObject(VM);
        }
    }
}

